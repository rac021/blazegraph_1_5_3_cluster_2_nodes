/* Configuration file for the discovery tool */

// Note that this file has no tunable parameters
// and should not be modified.

import java.text.DateFormat;

import net.jini.constraint.BasicMethodConstraints;
import net.jini.core.constraint.ConnectionRelativeTime;
import net.jini.core.constraint.InvocationConstraints;
import net.jini.core.discovery.LookupLocator;
import net.jini.discovery.LookupDiscoveryManager;
import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.tcp.TcpServerEndpoint;

import com.bigdata.util.config.NicUtil;

com.bigdata.disco.DiscoveryTool {

    private static exportIpAddr =
        NicUtil.getIpAddress("default.nic", "default", true);

    lookupLocatorConstraints = null;

    dateFormat =
        DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.FULL);

    uninterestingInterfaces = 
        new String[] { "java.io.Serializable",
                       "java.rmi.Remote",
                       "net.jini.admin.Administrable",
                       "net.jini.core.constraint.RemoteMethodControl",
                       "net.jini.id.ReferentUuid",
                       "com.bigdata.service.Service",
                       "com.bigdata.service.EventReceivingService"
                     };


    static discoveryManager = 
        new LookupDiscoveryManager
            (new String[]{}, new LookupLocator[]{}, null, this);
}

net.jini.discovery.LookupDiscovery {

    multicastRequestHost = 
        com.bigdata.disco.DiscoveryTool.exportIpAddr;

    multicastInterfaces = 
        NicUtil.getNetworkInterfaceArray("${networkInterface}");
}

net.jini.lookup.ServiceDiscoveryManager {

    private static serverILFactory =
        new BasicILFactory(
            new BasicMethodConstraints(
                new InvocationConstraints(
                    new ConnectionRelativeTime(10000L), null)),
            null);
    eventListenerExporter = 
        new BasicJeriExporter(TcpServerEndpoint.getInstance(com.bigdata.disco.DiscoveryTool.exportIpAddr, 0),
                              serverILFactory, false, false);
}
