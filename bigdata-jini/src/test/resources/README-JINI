Some notes on installation and use follow:

JINI

- jini is used as a service fabric for bigdata.  <start up jini and
  then configure your data and metadata services; clients then
  discover those services>

- jini 2.1 may report errors locating the shared libraries from awk,
  dirname, basename and grep when installing under un*x.  The problem
  is an assumption about the kernel version.  This problem is resolved
  by editing the installer and the launchall script. 
  See http://www.jini.org/wiki/Category:Getting_Started and
  http://www.linuxquestions.org/questions/showthread.php?t=370056 for
  a resolution.  Here is is in case that link goes away:
  
  Open the bin installer file in an editor. Look for the line 

   export LD_ASSUME_KERNEL=2.2.5
   
   and replace it with 

   #xport LD_ASSUME_KERNEL=2.2.5
   
   Save the file and launch. 
   
   Once jini is installed, you need to do exactly the same thing for the
   Launch-All script in the installverify directory - this is the script
   that you use the start jini.

- Here are some notes on getting things working on a Fedora Core 6 platform.
  The symptom was that ifconfig was reporting MULTICAST for the interface 
  but the jini install was complaining that multicase was not enabled for
  that interface.

	Here's what I did:

	First, verify that multicast is enabled on eth0 by typing ifconfig and looking for multicast

	if it is not enabled type ifconfig eth0 multicast

	after that add a default route for multicast broadcasts and bind it to eth0

	route add -net 224.0.0.0 netmask 240.0.0.0 dev eth0

	additionally, I disabled the firewall and I disabled SELinux (but I think the firewall was the big culprit here).

- Downloadable code is NOT required for deployments, but MAY be useful
  for the following purposes:

   (a) exposing services to the Jini service browser;

   (b) running procedures against services which were deployed before
       the procedures were written;

  If you have a complete classpath when running the various services
  then jini will not seek to transfer code from the client as the code
  will be resolved locally by the service.

  In order to support downloadable code you need to have an HTTP
  server that will serve class files to jini, including the interfaces
  for all remote services.  You can use any HTTP server for this
  purpose, and the server can be located on any machine accessible
  from the host(s) on which you are running jini.  As a convenience,
  jini bundles a simple HTTP server that you can start using a command
  like the following:

    java -jar ${JINI_HOME}/lib/classserver.jar -port 8080 -dir classes -trees -verbose&

  The javadoc describes the logging and command line options for this
  HTTP server.
  
    https://java.sun.com/products/jini/2.1/doc/api/com/sun/jini/tool/ClassServer.html

  The directory from which downloadable code will be served should
  contain at least the bigdata jar(s) plus any remote application code
  that you have defined (i.e., code that will run in the server
  process).

  The recommended approach to downloadable code is to extract the
  relevant classes into a directory that will be named to the HTTP
  server as follows.  Assuming that bigdata.jar is located in the
  current directory:

  mkdir classes
  cd classes
  jar xfz ../bigdata.jar

  If you deploy a new version of any JAR, then you SHOULD delete the
  classes directory and redeploy all relevant JARs to make sure that
  old class files are not left lying around.

- You can enable NIO support with JERI using TCP by specifying the
  following property to the JVM.  Note that JRMP does NOT allow for
  the possibility of NIO.

	-Dcom.sun.jini.jeri.tcp.useNIO=true

  More information on JERI and NIO is available using the following links.

   http://archives.java.sun.com/cgi-bin/wa?A2=ind0504&L=jini-users&P=33490
   http://archives.java.sun.com/cgi-bin/wa?A2=ind0506&L=jini-users&P=9626
   http://archives.java.sun.com/cgi-bin/wa?A2=ind0504&L=jini-users&D=0&P=26542
   http://java.sun.com/products/jini/2.0.1/doc/api/net/jini/jeri/tcp/package-summary.html

  Note that one server thread will still be required per concurrent RPC request
  owing to the semantics of RPC (call and wait for response) and the definition
  of JERI.

- Clients downloadable code that will be run on the bigdata services MUST set:
	
	-Djava.rmi.server.codebase=http://.../
	
	where "..." is your host and path
	
	in order for the correct codebase property to be communicated to clients that
	will then download code from that HTTP server.  Note: the trailing '/' is
	REQUIRED in your codebase or the generated URLs will NOT resolve correctly.

	There is an example of how to do this with the "ant lubm-install" target and
	the "lubmMaster.sh" script.

- Debugging with jini.
	
	See http://java.sun.com/j2se/1.4.2/docs/guide/rmi/javarmiproperties.html for
	some guidance.  Among other things, it suggests:
	
		-Djava.rmi.server.logCalls=true
		
	as an aid to debugging.  Also try setting
		
		-Dcom.sun.jini.reggie.proxy.debug=1
		
	for the client, e.g., the service browser. Also see:
	
		http://www.adtmag.com/java/articleold.aspx?id=1159
		
	for some (very good) guidance in debugging jini services.

	Note: You may have to restart jini locally in order to force download of 
	updated classes from the codebase!

	See http://archives.java.sun.com/cgi-bin/wa?A2=ind0512&L=jini-users&P=R391&I=-3
	for instructions on setting up an "download jar" (dljar) ANT task that can make
	life much simpler (one supposes).

    See http://archives.java.sun.com/cgi-bin/wa?A2=ind0311&L=jini-users&F=&S=&P=7182
        for a description of policy files and
        http://www.dancres.org/cottage/jini-start-examples-2_1.zip for the
        policy files described.
	
	See http://jan.newmarch.name/java/jini/tutorial/Ant.xml for a description of
	one (simple) approach to using ant for jini projects (it does not use the
	dljar ant task but explicitly enumerates what goes where).
	
	See http://jan.newmarch.name/java/jini/tutorial/TroubleShooting.xml#RMI%20Stubs
	for common errors when using RMI stubs.
	
	See https://java.sun.com/products/jini/2.1/doc/api/com/sun/jini/example/browser/package-summary.html
	for the dirty on the jini Service Browser.
