import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.tcp.TcpServerEndpoint;

import net.jini.discovery.LookupDiscovery;
import net.jini.core.discovery.LookupLocator;
import net.jini.core.entry.Entry;
import net.jini.lookup.entry.Name;
import net.jini.lookup.entry.Comment;
import net.jini.lookup.entry.Address;
import net.jini.lookup.entry.Location;
import net.jini.lookup.entry.ServiceInfo;
import net.jini.core.lookup.ServiceTemplate;

import java.io.File;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.util.UUID;

import com.bigdata.util.NV;
import com.bigdata.util.config.NicUtil;
import com.bigdata.journal.Options;
import com.bigdata.journal.BufferMode;
import com.bigdata.journal.jini.ha.HAJournal;
import com.bigdata.jini.lookup.entry.*;
import com.bigdata.service.IBigdataClient;
import com.bigdata.service.AbstractTransactionService;
import com.bigdata.service.jini.*;
import com.bigdata.service.jini.lookup.DataServiceFilter;
import com.bigdata.service.jini.master.ServicesTemplate;
import com.bigdata.jini.start.config.*;
import com.bigdata.jini.util.ConfigMath;

import org.apache.zookeeper.ZooDefs;
import org.apache.zookeeper.data.ACL;
import org.apache.zookeeper.data.Id;

// imports for various options.
import com.bigdata.btree.IndexMetadata;
import com.bigdata.btree.keys.KeyBuilder;
import com.bigdata.rdf.sail.BigdataSail;
import com.bigdata.rdf.spo.SPORelation;
import com.bigdata.rdf.spo.SPOKeyOrder;
import com.bigdata.rdf.lexicon.LexiconRelation;
import com.bigdata.rdf.lexicon.LexiconKeyOrder;
import com.bigdata.rawstore.Bytes;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeUnit.*;

/*
 * This is a sample configuration file for a highly available Journal. A
 * version of this file must be available to each HAJournalServer in the
 * pipeline.
 */

/*
 * Globals.
 */
bigdata {

   private static fedname = "benchmark";

   // NanoSparqlServer (http) port.
   private static nssPort = ConfigMath.add(8090,10);
   
   // write replication pipeline port (listener).
   private static haPort = ConfigMath.add(9090,10);
   
   // The #of services in the write pipeline.
   private static replicationFactor = 3;

   // The logical service identifier shared by all members of the quorum.
   private static logicalServiceId = System.getProperty("test.logicalServiceId","CI-HAJournal-1");
   
   // The service directory.
   // Note: Overridden by environment property when deployed.
   private static serviceDir = new File(System.getProperty("test.serviceDir",ConfigMath.getAbsolutePath(new File(new File(fedname,logicalServiceId),"Z"))));
   //new File(new File(fedname,logicalServiceId),"Z");
   
   // journal data directory.
   private static dataDir = serviceDir;

   // one federation, multicast discovery.
   //static private groups = LookupDiscovery.ALL_GROUPS;

   // unicast discovery or multiple setups, MUST specify groups.
   static private groups = new String[]{bigdata.fedname};

    /**
     * One or more unicast URIs of the form <code>jini://host/</code>
     * or <code>jini://host:port/</code> (no default).
     *
     * This MAY be an empty array if you want to use multicast
     * discovery <strong>and</strong> you have specified the groups as
     * LookupDiscovery.ALL_GROUPS (a <code>null</code>).
     */
    static private locators = new LookupLocator[] {

      // runs jini on the localhost using unicast locators.
      new LookupLocator("jini://localhost/")
   
      // runs jini on one or more hosts using unicast locators.
      //new LookupLocator("jini://"+jini1),
      //new LookupLocator("jini://"+jini2),

    };

    /**
     * A common point to set the Zookeeper client's requested
     * sessionTimeout and the jini lease timeout.  The default lease
     * renewal period for jini is 5 minutes while for zookeeper it is
     * more like 5 seconds.  This puts the two systems onto a similar
     * timeout period so that a disconnected client is more likely to
     * be noticed in roughly the same period of time for either
     * system.  A value larger than the zookeeper default helps to
     * prevent client disconnects under sustained heavy load.
     *
     * If you use a short lease timeout (LT 20s), then you need to override 
     * properties properties for the net.jini.lease.LeaseRenewalManager
     * or it will run in a tight loop (it's default roundTripTime is 10s
     * and it schedules lease renewals proactively.)
     */

    // jini
    static private leaseTimeout = ConfigMath.s2ms(20); 

    // zookeeper
    static private sessionTimeout = (int)ConfigMath.s2ms(20); 

    /*
     * Configuration for default KB.
     */

    private static namespace = "kb";

}

/*
 * Zookeeper client configuration.
 */
org.apache.zookeeper.ZooKeeper {

    /* Root znode for the federation instance. */
    zroot = "/" + bigdata.fedname;

    /* A comma separated list of host:port pairs, where the port is
     * the CLIENT port for the zookeeper server instance.
     */
    // standalone.
    servers = "localhost:2081";
    // ensemble
//  servers =   bigdata.zoo1+":2181"
//             + ","+bigdata.zoo2+":2181"
//        + ","+bigdata.zoo3+":2181"
//       ;

    /* Session timeout (optional). */
    sessionTimeout = bigdata.sessionTimeout;

    /* 
     * ACL for the zookeeper nodes created by the bigdata federation.
     *
     * Note: zookeeper ACLs are not transmitted over secure channels
     * and are placed into plain text Configuration files by the
     * ServicesManagerServer.
     */
    acl = new ACL[] {

       new ACL(ZooDefs.Perms.ALL, new Id("world", "anyone"))

    };

}

/*
 * You should not have to edit below this line.
 */

/*
 * Jini client configuration.
 */
com.bigdata.service.jini.JiniClient {

    groups = bigdata.groups;

    locators = bigdata.locators;
    
/*
    entries = new Entry[] {
      
      // Optional metadata entries.
      new Name("Z"),
      
      // Note: Used to assign the ServiceID to the service.
      new ServiceUUID(UUID.fromString(System.getProperty("test.serviceId")))

    };
*/
}

net.jini.lookup.JoinManager {

   maxLeaseDuration = bigdata.leaseTimeout;
   
}
