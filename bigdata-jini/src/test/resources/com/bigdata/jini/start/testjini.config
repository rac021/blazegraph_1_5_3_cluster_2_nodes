import com.sun.jini.config.ConfigUtil;
import net.jini.discovery.LookupDiscovery;
import net.jini.core.discovery.LookupLocator;

import java.io.File;
import com.bigdata.jini.util.ConfigMath;
import com.bigdata.jini.start.config.ServiceConfiguration;

bigdata {

    // This config file is currently used by only one
    // test, TestJiniCoreServicesProcessHelper; which
    // starts a lookup service. When the tests are run
    // using the ant based junit target, a lookup service
    // is also started externally that belongs to the
    // group with name set in the bigdata.fedname system
    // property. To help avoid possible conflicts with
    // the external lookup service when running 
    // TestJiniCoreServicesProcessHelper, the fedname 
    // entry (which is the member group used when
    // that test starts a lookup service) is not set
    // to the bigdata.fedname system property as it is
    // in the config file of other tests.

    private static fedname = "testFed";
    private static appHome = System.getProperty("app.home", ConfigMath.getAbsolutePath(new File(".")) );

    // logging configuration (value is a URI!)
    log4j="file:"+System.getProperty("log4j.path",
    	ConfigMath.getAbsolutePath(new File("src/resources/test/logging"))
    	)+"/log4j.properties";

}

jini {

    /**
     * Where jini was installed.
     */
    serviceDir = new File(bigdata.appHome);

    /**
     * The #of instances to run.
     *
     * Note: A jini service instance may be started on a host if it is
     * declared in [locators].  If locators is empty, then you are
     * using multicast discovery.  In this case an instance may be
     * started on any host, unless [constraints] are imposed.  In any
     * case, no more than [serviceCount] jini services will be started
     * at any given time.  This is checked against the #of discovered
     * instances.
     */
    serviceCount = 1;

    private static configFilename =
        ConfigUtil.concat( new String[] { bigdata.appHome, 
            "${/}src${/}test${/}resources${/}com${/}bigdata${/}jini${/}start${/}testStartJini.config" } );

    configFile = new File(configFilename);

    classpath = ServiceConfiguration.getClassPath();

    // For constructing the command line that is exec'd
    // Note that when running the tests using the ant
    // junit target, the bigdata.jar file (generated by
    // by ant) is used to access the bigdata class files; 
    // whereas when the test is run using eclipse, those
    // class files are accessed using the 'bin' directory
    // that is created by eclipse when it compiles the
    // bigdata codebase.

    // To avoid having to set the log4j.jar system property
    // when tests are run using eclipse
    private static log4jVersion = 
        ConfigUtil.concat( new String[] { bigdata.appHome,
            "${/}bigdata${/}lib${/}apache${/}log4j-1.2.15.jar" } );
    private static log4jJar = System.getProperty("log4j.jar", log4jVersion);

    private static cpArr = new String[] {"-cp"};
    private static classpathArr = 
        new String[] { ConfigUtil.concat( new String[] { 
                           bigdata.appHome, "${/}bin", ":",
                           bigdata.appHome, "{/}lib${/}bigdata.jar", ":",
                           bigdata.appHome, "${/}lib${/}jini${/}lib${/}start.jar", ":",
                           bigdata.appHome, "${/}lib${/}jini${/}lib${/}jsk-lib.jar", ":",
                           log4jJar } )
                     };
    private static arg0 = ServiceConfiguration.concat(cpArr, classpathArr);

    private static policyProp =
        ConfigUtil.concat( new String[] { "-Djava.security.policy=", bigdata.appHome, "${/}src${/}resources${/}config${/}policy.all" } );
    private static policyArg = new String[] {policyProp};

    private static arg1 = ServiceConfiguration.concat(arg0, policyArg);

    private static log4jProp =
        ConfigUtil.concat( new String[] { "-Dlog4j.configuration=", bigdata.appHome,
            "${/}src${/}resources${/}config${/}standalone${/}log4j.properties" } );
    private static log4jArg = new String[] {log4jProp};

    private static arg2 = ServiceConfiguration.concat(arg1, log4jArg);
    args = (String[])arg2;

    //for shutting down the httpd class server that is started by the test
    private static httpdPort = "23334";
    private static javaHome  = System.getProperty("java.home");
    private static javaCmd   = ConfigUtil.concat( new String[] { javaHome, "${/}", "bin", "${/}", "java" } );
    private static classserverJar = 
        ConfigUtil.concat( new String[] { bigdata.appHome, "${/}lib${/}jini${/}lib${/}classserver.jar" } );
    httpdStopCmd = ConfigUtil.concat( new String[] { javaCmd, " ", "-jar", " ", classserverJar, " ", "-port", " ", httpdPort, " ", "-stop" } );
}

/*
 * Jini client configuration
 */
com.bigdata.service.jini.JiniClient {

    // one federation, multicast discovery.
    groups = new String[] { bigdata.fedname };

    // multiple federations, MUST use unicast discovery.
    //groups = new String[]{"test"};

    locators = new LookupLocator[] {

	//new LookupLocator("jini://localhost/")

    };

}
