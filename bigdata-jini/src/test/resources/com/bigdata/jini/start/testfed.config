/*
 * A configuration file used by some of the unit tests in this package.
 *
 * @see TestService
 */

import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.tcp.TcpServerEndpoint;

import net.jini.discovery.LookupDiscovery;
import net.jini.core.discovery.LookupLocator;
import net.jini.core.entry.Entry;
import net.jini.lookup.entry.Name;
import net.jini.lookup.entry.Comment;
import net.jini.lookup.entry.Address;
import net.jini.lookup.entry.Location;
import net.jini.lookup.entry.ServiceInfo;

import java.io.File;

import com.bigdata.util.NV;

import com.bigdata.service.IBigdataClient;
import com.bigdata.service.jini.*;

import com.bigdata.jini.start.config.ServiceConfiguration;
import com.bigdata.jini.util.ConfigMath;

bigdata {

	/* Note: These MUST get overridden by the test setup to correspond to the
	 * federation name being used to run the test suite and to the zroot for
	 * the specific test instance.  See AbstractFedZooTestCase and also see the
	 * junit target in the top-level build.xml file. 
	 */ 
	fedname = System.getProperty("bigdata.fedname","testFed");
	zroot = System.getProperty("bigdata.zrootname","testZroot");

    // logging configuration (value is a URI!)
    log4j="file:"+System.getProperty("log4j.path",
    	ConfigMath.getAbsolutePath(new File("src/resources/test/logging"))
    	)+"/log4j.properties";

}

/*
 * Service configuration defaults.  These can also be specified on a
 * per service-type basis.  When the property is an array type, the
 * value here is concatenated with the optional array value on the per
 * service-type configuration.  Otherwise it is used iff no value is
 * specified for the service-type configuration.
 */
com.bigdata.jini.start.config.ServiceConfiguration {

    /* 
     * Default java command line arguments that will be used for all
     * java-based services
     *
     * Note: [-Dcom.sun.jini.jeri.tcp.useNIO=true] enables NIO.
     */
    defaultJavaArgs = new String[]{
	"-server",
	"-ea",
	"-Dcom.sun.jini.jeri.tcp.useNIO=true",
	"-Djava.security.policy="+ConfigMath.getAbsolutePath(new File("policy.all"))
    };

    // Optional classpath components.
    //classpath=new String[]{};
	
    classpath = (String[])ServiceConfiguration.concat(new String[]{"a","b","c"},ServiceConfiguration.getClassPath());

    /* Default path for service instances and their persistent
     * data. This may be overridden on a per service-type basis. 
     *
     * Note: For logical services that support failover, the concrete
     * service directory is assigned dynamically when a physical
     * service instance is created.
     */
    serviceDir = ConfigMath.getAbsoluteFile(new File(bigdata.fedname));
 
    // passed through to the ConfigurationProvider via the cmd line.
    // jiniOptions=new String[]{};

    // bigdata services default logging configuration (value is a URI!)
//    log4j="file:test/resources/logging/log4j.properties";
    log4j = bigdata.log4j;

}

/*
 * Zookeeper client configuration.
 */
org.apache.zookeeper.ZooKeeper {

    // Root znode for the federation instance.
    //zroot = "/test/"+bigdata.fedname;
    zroot = bigdata.zrootname;

    // A comma separated list of host:port pairs, where the port is
    // the CLIENT port for the zookeeper server instance.
    servers="localhost:"+System.getProperty("test.zookeeper.clientPort","2081");

    // Session timeout (optional).
    //sessionTimeout=xxxx;

}

/*
 * Jini client configuration for the ServicesManager.
 * 
 * Note: You MUST keep this synchronized with the jini configuration
 * for the other services.
 */
com.bigdata.service.jini.JiniClient {

    /* Default Entry[] for jini services.
     *
     * Note: A Name attribute will be added automatically using the
     * service type and the znode of the service instance.  That Name
     * will be canonical.  It is best if additional service names are
     * NOT specified as that might confuse somethings :-)
     *
     * Note: A Hostname attribute will be added dynamically.
     */
    entries = new Entry[] {
	new Comment(bigdata.fedname),
    };

    /**
     * A String[] whose values are the group(s) to be used for discovery
     * (no default). Note that multicast discovery is always used if
     * LookupDiscovery.ALL_GROUPS (a <code>null</code>) is specified.
     */
    groups = new String[] { bigdata.fedname };//, bigdata.zrootname };

    /**
     * One or more unicast URIs of the form <code>jini://host/</code>
     * or <code>jini://host:port/</code> (no default). This MAY be an
     * empty array if you want to use multicast discovery.
     */
    locators = new LookupLocator[] {
	  new LookupLocator("jini://localhost/")
    };

}

/**
 * Initial configuration for new instances of the transaction server.
 */
com.bigdata.service.jini.TransactionServer {

    // optional command line arguments.
    args = new String[]{"-Xmx1G", "-server"};

    options = new String[]{"com.bigdata.service.jini.TransactionServer.Options.SNAPSHOT_INTERVAL=60000"};

}
