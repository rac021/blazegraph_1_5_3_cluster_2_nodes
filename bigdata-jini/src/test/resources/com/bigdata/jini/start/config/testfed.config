/*
 * A configuration file used by some of the unit tests in this package.
 */

import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.tcp.TcpServerEndpoint;

import net.jini.discovery.LookupDiscovery;
import net.jini.core.discovery.LookupLocator;
import net.jini.core.entry.Entry;
import net.jini.lookup.entry.Name;
import net.jini.lookup.entry.Comment;
import net.jini.lookup.entry.Address;
import net.jini.lookup.entry.Location;
import net.jini.lookup.entry.ServiceInfo;

import java.io.File;

import com.bigdata.util.NV;

import com.bigdata.service.IBigdataClient;
import com.bigdata.service.jini.*;

import com.bigdata.jini.start.config.ServiceConfiguration;
import com.bigdata.jini.util.ConfigMath;

bigdata {

    fedname = System.getProperty("bigdata.fedname","testFed");
    zrootname = System.getProperty("bigdata.zrootname","testZroot");

    // logging configuration (value is a URI!)
    log4j="file:"+System.getProperty("log4j.path",
    	ConfigMath.getAbsolutePath(new File("bigdata/src/resources/logging"))
    	)+"/log4j.properties";

}

/**
 * Zookeeper server configuration.
 */
org.apache.zookeeper.server.quorum.QuorumPeerMain {

    /* Directory for zookeeper's persistent state.
     */
    dataDir = new File(bigdata.fedname+"/zookeeper");
    //dataDir = new File("/var/zookeeper");

    /* Optional directory for the zookeeper log files.
     * 
     * Note: A dedicated log device is highly recommended!
     */
    //dataLogDir=new File("/var/zookeeper-log");

    // required.
    clientPort=2181;

    tickTime=2000;

    initLimit=5;

    syncLimit=2;

    /* A comma delimited list of the known zookeeper servers together
     * with their assigned "myid".
     *
     * Note: You SHOULD specify the full list of servers that are
     * available to the federation. An instance of zookeeper will be
     * started automatically on each host running ServicesManager that
     * is present in the [servers] list IF no instance is found
     * running on that host at the specified [clientPort].
     * 
     * Note: zookeeper interprets NO entries as the localhost with
     * default peer and leader ports. This will work as long as the
     * localhost is already running zookeeper.  However, zookeeper
     * WILL NOT automatically start zookeeper if you do not specify
     * the [servers] property.  You can also explicitly specify
     * "localhost" as the hostname, but that only works for a single
     * machine.
     *
     * Note: jini can not handle the zookeeper [server.#] properties
     * since the property name is not a legal java
     * identifier. Therefore we use a meta-property "servers" whose
     * value is the list of the individual server properties.  The
     * syntax is obvious, if ugly.
     */
    // standalone
    servers="1=localhost:2888:3888";

    classpath = new String[] { "${zookeeper.jar}", "${log4j.jar}" };
		
    /* Optional command line arguments for the JVM used to execute
     * zookeeper.
     *
     * Note: swapping for zookeeper is especially bad since the
     * operations are serialized, so if anything hits then disk then
     * all operations in the queue will have that latency as well.
     */
    //args=new String[]{"-Xmx2G"};

    // zookeeper server logging configuration (value is a URI!)
    log4j = bigdata.log4j;

}

/*
 * Service configuration defaults.  These can also be specified on a
 * per service-type basis.  When the property is an array type, the
 * value here is concatenated with the optional array value on the per
 * service-type configuration.  Otherwise it is used iff no value is
 * specified for the service-type configuration.
 */
com.bigdata.jini.start.config.ServiceConfiguration {

    // Optional command line arguments.
    //args=new String[]{};

    /* 
     * Default java command line arguments that will be used for all
     * java-based services
     *
     * Note: [-Dcom.sun.jini.jeri.tcp.useNIO=true] enables NIO.
     */
    defaultJavaArgs = new String[]{
	"-server",
	"-ea",
	"-Dcom.sun.jini.jeri.tcp.useNIO=true",
        "-Djava.security.policy="+ConfigMath.getAbsolutePath(new File("policy.all"))
    };

    // Optional classpath components.
    //classpath=new String[]{};
	
    classpath = (String[])ServiceConfiguration.concat(new String[]{"a","b"},new String[]{"c"});

    /* Default path for service instances and their persistent
     * data. This may be overridden on a per service-type basis. 
     *
     * Note: For logical services that support failover, the concrete
     * service directory is assigned dynamically when a physical
     * service instance is created.
     */
    serviceDir = ConfigMath.getAbsoluteFile(new File(bigdata.fedname));

    // passed through to the ConfigurationProvider via the cmd line.
    // jiniOptions=new String[]{};

    // bigdata services default logging configuration (value is a URI!)
    log4j = bigdata.log4j;

}

/*
 * Zookeeper client configuration.
 */
org.apache.zookeeper.ZooKeeper {

    /* Root znode for the federation instance. */
    zroot = "/test/"+bigdata.fedname;

    /* A comma separated list of host:port pairs, where the port is
     * the CLIENT port for the zookeeper server instance.
     */
    servers="localhost:2181";

    /* Session timeout (optional). */
    //sessionTimeout=xxxx;

}

/*
 * Jini client configuration for the ServicesManager.
 * 
 * Note: You MUST keep this synchronized with the jini configuration
 * for the other services.
 */
com.bigdata.service.jini.JiniClient {

    /* Default Entry[] for jini services.
     *
     * Note: A Name attribute will be added automatically using the
     * service type and the znode of the service instance.  That Name
     * will be canonical.  It is best if additional service names are
     * NOT specified as that might confuse somethings :-)
     *
     * Note: A Hostname attribute will be added dynamically.
     */
    entries = new Entry[] { new Comment(bigdata.fedname) };

    /**
     * A String[] whose values are the group(s) to be used for discovery
     * (no default). Note that multicast discovery is always used if
     * LookupDiscovery.ALL_GROUPS (a <code>null</code>) is specified.
     */
    groups = new String[] { bigdata.fedname, bigdata.zrootname };

    /**
     * One or more unicast URIs of the form <code>jini://host/</code>
     * or <code>jini://host:port/</code> (no default). This MAY be an
     * empty array if you want to use multicast discovery.
     */
    locators = new LookupLocator[] {
	//new LookupLocator("jini://localhost/")
    };

}

/**
 * Initial configuration for new instances of the transaction server.
 */
com.bigdata.service.jini.TransactionServer {

    // optional command line arguments.
    args = new String[]{"-Xmx1G", "-server"};

    options = new String[]{"com.bigdata.service.jini.TransactionServer.Options.SNAPSHOT_INTERVAL=60000"};

}
