
import com.bigdata.util.config.ConfigurationUtil;

import com.sun.jini.config.ConfigUtil;
import com.sun.jini.start.NonActivatableServiceDescriptor;
import com.sun.jini.start.ServiceDescriptor;
import net.jini.core.discovery.LookupLocator;

import com.bigdata.jini.util.ConfigMath;
import com.bigdata.util.config.NicUtil;

import java.io.File;

com.sun.jini.start {

    private static appHome = System.getProperty("app.home", ConfigMath.getAbsolutePath(new File(".")) );
    private static codebaseHost = 
        NicUtil.getIpAddress("default.nic", "default", true);
    private static codebasePort = "23334";
    private static defaultCodebaseRootDir =
        ConfigUtil.concat( new String[] { appHome, "${/}lib${/}jini${/}lib-dl" } );
    private static codebaseRootDir = System.getProperty("bigdata.codebase.rootDir", defaultCodebaseRootDir);

    private static jskCodebase = 
        ConfigurationUtil.computeCodebase
            ( codebaseHost,
              "jsk-dl.jar", Integer.parseInt(codebasePort),
              codebaseRootDir, "none" );

    private static servicePolicyFile =
        ConfigUtil.concat( new String[] { appHome, "${/}src${/}test${/}resources${/}config${/}policy.all" } );

    // For starting HTTP codebase class server
    private static httpdCodebase   = "";
    private static httpdPolicyFile = servicePolicyFile;
    private static httpdClasspath  = 
        ConfigUtil.concat( new String[] { appHome, "{/}lib${/}jini${/}lib${/}classserver.jar" } );
    private static httpdImplName   = "com.sun.jini.tool.ClassServer";
    private static httpdArgsArray  = new String[] {
        "-port", codebasePort,
        "-dir",  codebaseRootDir,
        "-stoppable"
    };

    private static httpdDescriptor = new NonActivatableServiceDescriptor(
        httpdCodebase, httpdPolicyFile, httpdClasspath,
        httpdImplName, httpdArgsArray);

    // For starting a lookup service
    private static reggieServerCodebase = 
        ConfigurationUtil.computeCodebase
            ( codebaseHost,
              "reggie-dl.jar", Integer.parseInt(codebasePort),
              codebaseRootDir, "none" );
    private static reggieCodebase =
        ConfigUtil.concat( new String[] { reggieServerCodebase, " ", jskCodebase } );

    private static reggieClasspath = 
        ConfigUtil.concat( new String[] { appHome, "{/}lib${/}jini${/}lib${/}reggie.jar" } );

    private static reggieImplName  = "com.sun.jini.reggie.TransientRegistrarImpl";
    private static reggieConfig    = 
        ConfigUtil.concat( new String[] { appHome, "${/}src${/}test${/}resources${/}com${/}bigdata${/}jini${/}start${/}testReggie.config" } );

    private static reggieArgs =
        "com.sun.jini.reggie.initialLookupLocators=new LookupLocator[]{}";

    private static reggieArgsArray = new String[] { reggieConfig, reggieArgs };

    private static reggieDescriptor = new NonActivatableServiceDescriptor(
        reggieCodebase, servicePolicyFile, reggieClasspath,
        reggieImplName, reggieArgsArray);


    serviceDescriptors = new ServiceDescriptor[] {
        httpdDescriptor,
        reggieDescriptor
    };

}
