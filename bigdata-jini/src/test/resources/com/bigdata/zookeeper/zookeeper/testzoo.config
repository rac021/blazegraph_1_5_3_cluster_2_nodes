/*
 * A configuration file used by some of the unit tests in this package.
 */
import java.io.File;
import com.sun.jini.config.ConfigUtil;
import com.bigdata.jini.util.ConfigMath;
import com.bigdata.util.config.NicUtil;

/**
 * Zookeeper server configuration.
 */
org.apache.zookeeper.server.quorum.QuorumPeerMain {

    /* Directory for zookeeper's persistent state.
     */
    serviceDir = new File("test-zoo");
    //dataDir = new File("/var/zookeeper");

    /* Optional directory for the zookeeper log files.
     * 
     * Note: A dedicated log device is highly recommended!
     */
    //dataLogDir=new File("/var/zookeeper-log");

    // required.
    clientPort=2181;

    tickTime=2000;

    initLimit=5;

    syncLimit=2;

    private static appHome = 
        System.getProperty("app.home", ConfigMath.getAbsolutePath(new File(".")) );
    private static localIpAddr = 
        NicUtil.getIpAddress("default.nic", "default", true);

    /* A comma delimited list of the known zookeeper servers together
     * with their assigned "myid".
     *
     * Note: You SHOULD specify the full list of servers that are
     * available to the federation. An instance of zookeeper will be
     * started automatically on each host running ServicesManager that
     * is present in the [servers] list IF no instance is found
     * running on that host at the specified [clientPort].
     * 
     * Note: zookeeper interprets NO entries as the localhost with
     * default peer and leader ports. This will work as long as the
     * localhost is already running zookeeper.  However, zookeeper
     * WILL NOT automatically start zookeeper if you do not specify
     * the [servers] property.  You can also explicitly specify
     * "localhost" as the hostname, but that only works for a single
     * machine.
     *
     * Note: jini can not handle the zookeeper [server.#] properties
     * since the property name is not a legal java
     * identifier. Therefore we use a meta-property "servers" whose
     * value is the list of the individual server properties.  The
     * syntax is obvious, if ugly.
     */
    // standalone
    servers = ConfigUtil.concat( new String[] { "1=", localIpAddr, ":2888:3888" } );

    // ensemble
    //servers="1=zoo1:2888:3888, 2=zoo2:2888:3888, 3=zoo3:2888:3888";

	/* It is Ok to do this in general _except_ that we change to the service
	 * directory before we start the service so relative path names WILL NOT
	 * work.
	 */
    // To avoid having to set the log4j.jar system property
    // when tests are run using eclipse
    private static zkVersion = 
        ConfigUtil.concat( new String[] { appHome,
            "${/}bigdata-jini${/}lib${/}apache${/}zookeeper-3.2.1.jar" } );
    private static zkJar = System.getProperty("zookeeper.jar", zkVersion);

    private static log4jVersion = 
        ConfigUtil.concat( new String[] { appHome, 
            "${/}bigdata${/}lib${/}apache${/}log4j-1.2.15.jar" } );
    private static log4jJar = System.getProperty("log4j.jar", log4jVersion);

    classpath = new String[] { zkJar, log4jJar };

    /* Optional command line arguments for the JVM used to execute
     * zookeeper.
     *
     * Note: swapping for zookeeper is especially bad since the
     * operations are serialized, so if anything hits then disk then
     * all operations in the queue will have that latency as well.
     */
    //args=new String[]{"-Xmx2G"};

    /* zookeeper server logging configuration (value is a URI!)
     *
     * Again, note problem with relative URI - must be absolution to be
     * located since we change to the service directory before starting
     * the service.
     */
    log4j="file:"+System.getProperty("log4j.path",
    	ConfigMath.getAbsolutePath(new File("bigdata/src/resources/logging"))
    	)+"/log4j.properties";

}
