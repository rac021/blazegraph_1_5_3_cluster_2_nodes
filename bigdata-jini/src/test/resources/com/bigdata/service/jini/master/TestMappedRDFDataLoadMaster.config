/**
 * Mapped, distributed bulk loader configuration.
 */
com.bigdata.rdf.load.MappedRDFDataLoadMaster {

	/* Note: The #of these services is hardwired in JiniServicesHelper.
	 */
	clientServiceCount = 1;
	dataServiceCount = 2;

    // The job name.
    jobName = "TestMappedTaskMaster";

    // The KB name.
    namespace = "TestMappedTaskMaster";
    
	// The #of client tasks to execute.
    nclients = clientServiceCount;

    /* The directory for scheduled index partition dumps for runs. May be NAS
     * or a local file system.  Only the master writes on this directory.
     */
	//indexDumpDir = new File("@NAS@/"+jobName+"-indexDumps");
	//indexDumpNamespace = namespace;
	
	lubmDir = new File("bigdata-rdf/src/resources/data/lehigh");
	
    // Scanner identifies resources to be loaded.
    resourceScannerFactory = com.bigdata.service.jini.master.FileSystemScanner.newFactory(
    	new File(lubmDir,"U1"), // dataDir
    	new com.bigdata.rdf.load.RDFFilenameFilter() // optional filename filter.
    	);

    // The ontology to load (file or directory) when the KB is created.
    ontology = new File(lubmDir,"univ-bench.owl");

	// The maximum thread pool size for RDF parser tasks.
    //parserPoolSize = 5;

	// The capacity of the work queue for the parser thread pool.
	//parserQueueCapacity = parserPoolSize;

	// The maximum #of parsed but not yet buffered statements before the parser
	// thread pool is paused (limits RAM demand by the client).
	unbufferedStatementThreshold = ConfigMath.multiply(2,Bytes.megabyte);

	// The maximum thread pool size for buffering writes for the TERM2ID index.
	//term2IdWriterPoolSize = 5;
	
	// The maximum thread pool size for buffering writes for the TERM2ID index.
	//otherWriterPoolSize = 5;

	// The maximum thread pool size asynchronous notifications.
	// notifyPoolSize = 5;

	// Size of chunks written onto the asynchronous write API buffers.
	producerChunkSize = 20000;
	
	// Initial capacity of the RDF Value hash map.
	valuesInitialCapacity = 20000;
	
	// Initial capacity of the RDF Blank node hash map.
	bnodesInitialCapacity = 16;

    // create the KB if not found.
    create = true;

    // when true, deletes each source file once loaded successfully.
    deleteAfter = false;

    // when true, loads data.
    loadData = true;

    // when true, computes closure.
    computeClosure = false;

	/*
	 * When true, requests a compacting merge of the data services in
	 * the federation before computing the closure.
	 */
	forceOverflowBeforeClosure = false;

	// force overflow of all data services after the job ends (optimizes for query).
	forceOverflow = false;

    /* How long the master will wait in milliseconds to discover the services
     * that you specify for [servicesTemplates] and [clientsTemplate].
     */
    awaitServicesTimeout = 1000;
    
	/* The minimum set of services which must be discovered before the master
	 * can start.
	 */
	servicesTemplates = new ServicesTemplate[] {

		// the metadata service
		new ServicesTemplate(
			1/*minMatches*/,
			new ServiceTemplate(null/*serviceID*/,
				new Class[]{
					com.bigdata.service.IMetadataService.class
				},
				null/*attributes*/),
			null/*filter*/
			),

		// the data services (filter is required to exclude metadata services)
		new ServicesTemplate(
			dataServiceCount/*minMatches*/,
			new ServiceTemplate(null/*serviceID*/,
				new Class[]{
					com.bigdata.service.IDataService.class
				},
				null/*attributes*/),
			DataServiceFilter.INSTANCE/*filter*/
			),

		// the load balancer
		new ServicesTemplate(
			1/*minMatches*/,
			new ServiceTemplate(null/*serviceID*/,
				new Class[] {
					com.bigdata.service.ILoadBalancerService.class
				},
				null/*attributes*/),
			null/*filter*/
			)
		
	};

    /* Template for matching the services to which the clients will be
     * distributed for execution.  Normally you will specify
     * IClientService as the interface to be discovered.  While it is
     * possible to run tasks on an IDataService or even an
     * IMetadataService since they both implement IRemoteExecutor, it
     * is generally discouraged unless the tasks require explicit
     * access to the local index partitions for their execution.
     */
	clientsTemplate = new ServicesTemplate(
			clientServiceCount, // minMatches
			new ServiceTemplate(
				null, //serviceID
				new Class[]{
					com.bigdata.service.IClientService.class
				},
				null // attributes
			    ),
			null // filter
			);

	// KB properties.
    properties = new NV[] {
	
        new NV(BigdataSail.Options.TRUTH_MAINTENANCE, "false" ),

        new NV(BigdataSail.Options.NATIVE_JOINS, "true"),

        /*
         * May be used to turn off inference during query, but will
	 * cause ALL inferences to be filtered out when reading on the
	 * database.
         */
        // new NV(BigdataSail.Options.INCLUDE_INFERRED, "false"),

        /*
         * May be used to turn off query-time expansion of entailments such as
         * (x rdf:type rdfs:Resource) and owl:sameAs even through those
         * entailments were not materialized during forward closure (this
	 * disables the backchainer!)
         */
        new NV(BigdataSail.Options.QUERY_TIME_EXPANDER, "false"),

        new NV(BigdataSail.Options.AXIOMS_CLASS, "com.bigdata.rdf.axioms.RdfsAxioms"),
        // new NV(BigdataSail.Options.AXIOMS_CLASS,"com.bigdata.rdf.axioms.NoAxioms"),

        /*
         * Turn off the full text index (search for literals by keyword).
         */
	new NV(BigdataSail.Options.TEXT_INDEX, "false"),

        //new NV(BigdataSail.Options.BLOOM_FILTER, "true"),

        //new NV(BigdataSail.Options.TERMID_BITS_TO_REVERSE,"6"),

        new NV(BigdataSail.Options.STATEMENT_IDENTIFIERS, "false"),

        //new NV(BigdataSail.Options.JUSTIFY, "false"),

        //new NV(BigdataSail.Options.NESTED_SUBQUERY, "false"),

        // new NV(BigdataSail.Options.MAX_PARALLEL_SUBQUERIES, "5"),
        new NV(BigdataSail.Options.MAX_PARALLEL_SUBQUERIES, "0"),

        /*
         * Turn off incremental closure in the DataLoader object.
         */
        new NV(com.bigdata.rdf.store.DataLoader.Options.CLOSURE, "None"),
	
        /*
         * Turn off commit in the DataLoader object. We do not need to commit
         * anything until we have loaded all the data and computed the closure
         * over the database.
         */
        new NV(com.bigdata.rdf.store.DataLoader.Options.COMMIT,"None"),

	};
	
}
