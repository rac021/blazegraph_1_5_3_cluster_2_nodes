import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.tcp.TcpServerEndpoint;

import net.jini.discovery.LookupDiscovery;
import net.jini.core.discovery.LookupLocator;
import net.jini.core.entry.Entry;
import net.jini.lookup.entry.Name;
import net.jini.lookup.entry.Comment;
import net.jini.lookup.entry.Address;
import net.jini.lookup.entry.Location;
import net.jini.lookup.entry.ServiceInfo;
import net.jini.core.lookup.ServiceTemplate;
import com.sun.jini.config.ConfigUtil;

import java.io.File;

import com.bigdata.util.NV;
import com.bigdata.util.config.NicUtil;
import com.bigdata.journal.BufferMode;
import com.bigdata.jini.lookup.entry.*;
import com.bigdata.service.IBigdataClient;
import com.bigdata.service.jini.*;
import com.bigdata.jini.start.config.*;
import com.bigdata.jini.util.ConfigMath;
import com.bigdata.service.jini.lookup.DataServiceFilter;
import com.bigdata.service.jini.master.ServicesTemplate;
import com.bigdata.rdf.store.AbstractTripleStore;
import com.bigdata.rdf.sail.BigdataSail;

import org.apache.zookeeper.ZooDefs;
import org.apache.zookeeper.data.ACL;
import org.apache.zookeeper.data.Id;

import com.bigdata.rawstore.Bytes;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeUnit.*;

/*
 * This is a standalone configuration file for a bigdata federation
 * used for unit tests in conjunction with the JiniServicesHelper class.
 * That class starts the necessary services "by hand" so it can have hard
 * references to the server objects.  The ServicesManagerServer is not used
 * for this file.
 * 
 * Note: This file uses the jini configuration mechanism.  The syntax
 * is a subset of Java.  The properties for each component are grouped
 * within the namespace for that component.
 *
 * See the net.jini.config.ConfigurationFile javadoc for more
 * information.
 */

/*
 * A namespace use for static entries referenced elsewhere in this
 * ConfigurationFile.
 */
bigdata {

    /**
     * The name for this federation.
     *
     * Note: This is used to form the [zroot] (root node in zookeeper
     * for the federation) and the [serviceDir] (path in the file
     * system for persistent state for the federation).
     *
     * Note: If you will be running more than one federation, then you
     * MUST use unicast discovery and specify the federation name in
     * the [groups].
     */
    static fedname = System.getProperty("bigdata.fedname","testBigdataStandalone");
    static zroot = System.getProperty("bigdata.zrootname","testBigdataStandaloneZroot");

    private static appHome = System.getProperty("app.home", ConfigMath.getAbsolutePath(new File(".")) );

    // The default root for all persistent state.
    static serviceDir = ConfigMath.getAbsoluteFile(new File(fedname));

    private static localIpAddr = 
        NicUtil.getIpAddress("default.nic", "default", true);

    /*
     * Example cluster configuration.
     *
     * Data services are load balanced.  Index partitions will be
     * moved around as necessary to ensure hosts running data
     * service(s) are neither under nor over utilized.  Data services
     * can be very resource intensive processes.  They heavily buffer
     * both reads and writes, and they use RAM to do so.  They also
     * support high concurrency and can use up to one thread per index
     * partition.  How many cores they will consume is very much a
     * function of the application.
     *
     * Zookeeper services use a quorum model.  Always allocate an odd
     * number.  3 gives you one failure.  5 gives you two failures.
     * Zookeeper will sync the disk almost continuously while it is
     * running.  It really deserves its own local disk.  Zookeeper
     * also runs in memory.  Since all operations are serialized, if
     * it starts swapping then performance will drop through the floor.
     *
     * Jini uses a peer model.  Each service registers with each
     * registrar that it discovers.  Each client listeners to each
     * registrar that it discovers.  The default jini core services
     * installation runs entirely in memory (no disk operations, at
     * least not for service registration). A second instance of the
     * jini core services provides a safety net.  If you are using
     * multicast then you can always add another instance.
     */

    static private lbs = localIpAddr;
    static private txs = localIpAddr;
    static private mds = localIpAddr;

    // jini server(s).
    static private jini1 = localIpAddr;
//     static private jini = new String[]{jini1,jini2};
    static private zoo1 = localIpAddr;
    static private zoo = new String[] {zoo1};
    // data service machines (could be more than one instance per).
    static private ds1 = localIpAddr;
    static private ds = new String[]{ds1};
    static private dataServiceCount = 2;
	static private maxDataServicePerHost = 2;

    /**
     * A String[] whose values are the group(s) to be used for discovery.
     */
    static private groups = new String[] { bigdata.fedname };//, bigdata.zrootname };

    /**
     * One or more unicast URIs of the form <code>jini://host/</code>
     * or <code>jini://host:port/</code> (no default).
     *
     * This MAY be an empty array if you want to use multicast
     * discovery <strong>and</strong> you have specified the groups as
     * above.
     */
    static private locators = new LookupLocator[] {
		  new LookupLocator("jini://localhost/")
    };

    /**
     * The policy file that will be used to start services.
     *
     * Note: The default policy is completely open.
     */
    private static policy = "policy.all";
    
    /**
     * Where jini is installed.
     */
    private static JINI_HOME = new File(bigdata.appHome);

    // The default logging configuration (a URI!)
    log4j="file:"+System.getProperty("log4j.path",
    	ConfigMath.getAbsolutePath(new File("bigdata/src/resources/logging"))
    	)+"/log4j.properties";

}

/*
 * Service configuration defaults.  These can also be specified on a
 * per service-type basis.  When the property is an array type, the
 * value here is concatenated with the optional array value on the per
 * service-type configuration.  Otherwise it is used iff no value is
 * specified for the service-type configuration.
 */
com.bigdata.jini.start.config.ServiceConfiguration {

    /* 
     * Default java command line arguments that will be used for all
     * java-based services
     *
     * Note: [-Dcom.sun.jini.jeri.tcp.useNIO=true] enables NIO.
     */
    defaultJavaArgs = new String[]{
	"-server",
	"-ea",
	"-Dcom.sun.jini.jeri.tcp.useNIO=true",
	"-Djava.security.policy="+bigdata.policy
    };

    // Path for service instances and their persistent data.
    serviceDir = bigdata.serviceDir;
 
    log4j=bigdata.log4j;

}

/**
 * Jini service configuration.
 *
 * WARNING: Starting the jini services browser requires a GUI.  If you
 * are running from a terminal without a GUI then you MUST edit the
 * JINI_HOME/installverify/support/startAll.config file and comment
 * out the "Browser" component.  Unfortunately, you have to install it
 * with a GUI in the first place.
 *
 * Note: You can probably comment out several of the other components
 * as well.  We are using reggie (the service registrar), and the
 * classserver might be a depenency for reggie, but I don't believe
 * that anything else is being used.
 */
jini {

    /**
     * @see <a href="http://sourceforge.net/apps/trac/bigdata/ticket/183">trac 183</a>
     */
    timeout = 20000 ;

    /**
     * Where jini was installed.
     */
    serviceDir = bigdata.JINI_HOME;

    /**
     * The #of instances to run.
     *
     * Note: A jini service instance may be started on a host if it is
     * declared in [locators].  If locators is empty, then you are
     * using multicast discovery.  In this case an instance may be
     * started on any host, unless [constraints] are imposed.  In any
     * case, no more than [serviceCount] jini services will be started
     * at any given time.  This is checked against the #of discovered
     * instances.
     */
    serviceCount = 1;

}

/**
 * Zookeeper server configuration.
 */
org.apache.zookeeper.server.quorum.QuorumPeerMain {

    /* Directory for zookeeper's persistent state.  The [id] will be
     * appended as another path component automatically to keep
     * instances separate.
     */
    dataDir = new File(bigdata.serviceDir,"zookeeper");
    
    // required.
    clientPort=2181;

    tickTime=2000;

    initLimit=5;

    syncLimit=2;

	// Note: overridden by JiniServicesHelper to the actual ports in use.
    servers = ConfigUtil.concat( new String[] { "1=", bigdata.localIpAddr, ":2888:3888" } );

    // To avoid having to set the log4j.jar system property
    // when tests are run using eclipse
    private static zkVersion = 
        ConfigUtil.concat( new String[] { bigdata.appHome,
            "${/}bigdata-jini${/}lib${/}apache${/}zookeeper-3.2.1.jar" } );
    private static zkJar = System.getProperty("zookeeper.jar", zkVersion);

    private static log4jVersion = 
        ConfigUtil.concat( new String[] { bigdata.appHome, 
            "${/}bigdata${/}lib${/}apache${/}log4j-1.2.15.jar" } );
    private static log4jJar = System.getProperty("log4j.jar", log4jVersion);

    classpath = new String[] { zkJar, log4jJar };

    // zookeeper server logging configuration (value is a URI!)
    log4j = bigdata.log4j;

}

/*
 * Zookeeper client configuration.
 */
org.apache.zookeeper.ZooKeeper {

    /* Root znode for the federation instance. */
    zroot = "/"+bigdata.fedname;

    /* A comma separated list of host:port pairs, where the port is
     * the CLIENT port for the zookeeper server instance.
     */
    servers = ConfigUtil.concat( new String[] { bigdata.localIpAddr, ":", System
                        .getProperty("test.zookeeper.clientPort","2181")} );

    /* Session timeout (optional, but heavy load can cause disconnects with
     * the default timeout).
     */
    sessionTimeout = 20000;

    /* 
     * ACLs for the federation zroot.
     *
     * Note: zookeeper ACLs are not transmitted over secure channels
     * and are placed into plain text Configuration files by the
     * ServicesManagerServer.
     */
    acl = new ACL[] {

	new ACL(ZooDefs.Perms.ALL, new Id("world", "anyone"))

    };

}

/*
 * Jini client configuration
 */
com.bigdata.service.jini.JiniClient {

    groups = bigdata.groups;

    locators = bigdata.locators;

    /*
     * Set up some default properties values that will be inherited
     * (copy by value) by all clients and services started using this
     * configuration file.
     */
    properties = new NV[] {

    // Disable HTTPD services.
    new NV(IBigdataClient.Options.HTTPD_PORT, "-1"),

    // Disable OS performance counter collection.
    new NV(IBigdataClient.Options.COLLECT_PLATFORM_STATISTICS,"false"),

    // Disable queue statistics collection.
    new NV(IBigdataClient.Options.COLLECT_QUEUE_STATISTICS,"false"),

    };

}

com.bigdata.service.jini.TransactionServer {

	serviceDir = new File(bigdata.serviceDir,"txs");

	properties = new NV[] {
	
		new NV(
			TransactionServer.Options.DATA_DIR,
		 	ConfigMath.getAbsolutePath(new File(serviceDir,"data"))
		 	)
	
	};

}

com.bigdata.service.jini.MetadataServer {

	serviceDir = new File(bigdata.serviceDir,"mds");

	properties = new NV[] {
	
		new NV(
			MetadataServer.Options.DATA_DIR,
		 	ConfigMath.getAbsolutePath(new File(serviceDir,"data"))
		 	)
	
	};

}

com.bigdata.service.jini.LoadBalancerServer {

	serviceDir = new File(bigdata.serviceDir,"lbs");

}

com.bigdata.service.jini.ClientServer {

	serviceDir = new File(bigdata.serviceDir,"cs");

}

com.bigdata.service.jini.DataServer {

	/* Note: Since we start multiple data service instances we have to specify
	 * the serviceDir in the JiniServicesHelper code.
	 */
	//serviceDir = new File(bigdata.serviceDir,"mds");

	properties = new NV[] {
	
		new NV(
			MetadataServer.Options.DATA_DIR,
		 	ConfigMath.getAbsolutePath(new File(serviceDir,"data"))
		 	)
	
	};

}

/**
 * Options for a utility to send a sighup() message to all discovered
 * services managers.
 */
com.bigdata.service.jini.BroadcastSighup {

	// push the service configuration to zookeeper.
	pushConfig = false;
	
	// restart any services not currently running.
	restartServices = true;

	// time in milliseconds to wait for service discovery	
	discoveryDelay = 5000;

}

/**
 * Configuration for a throughput testing utility.
 */
com.bigdata.service.jini.benchmark.ThroughputMaster {

	//forceOverflow=true;

	nclients = 50;
	jobName = "test_2";
	namespace = "test.throughputTest.test_1";
	asynchronous = true;
	npartitions = 10;
	startKeyPartitions = true;
	operationCount = 10000;
	maxKeysPerOp = 1000;
	incRange = 100;
	zookeeperUpdateInterval = 0; // zero disables.

    // minimum #of data services to run.
	minDataServices = 2;

    // How long the master will wait to discover the minimum #of data
    // services that you specified (ms).
    awaitDataServicesTimeout = 2000;

}

/*
 * Note: Whitespace intentionally follows this comment!
 */
 
 
